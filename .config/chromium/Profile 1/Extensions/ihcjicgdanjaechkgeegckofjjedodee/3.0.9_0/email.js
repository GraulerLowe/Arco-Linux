chrome||browser||(window.chrome=chrome||window.chrome||window.browser),(chrome||window.chrome).runtime.getURL(""),(()=>{"use strict";Object.freeze({LicenseStateUnknown:0,LicenseStateFree:1,LicenseStateTrial:2,LicenseStateTrialExpired:3,LicenseStateLicensed:4,LicenseStateLicenseExpired:5,LicenseStateLicenseGrace:6}),Object.freeze([2,4,6]);const e="sendTelemetry",s="enableNativeMessaging",o="enableProtection",t="MSG_SETTINGS_SET",n="undefined"!=typeof window?window:self,i=n.chrome||n.browser||browser;let r;console.log(`POLYFILL => User Agent: ${navigator.userAgent}, Browser: ${i}`);try{r=indexedDB||n.indexedDB}catch(e){console.log(`Error initializing indexedDB: ${e.message}`)}performance||n.performance,URL||n.URL;const a={reload:null},c=e=>new Promise(((s,o)=>{i.runtime.sendMessage({type:"MSG_SETTINGS_GET",payload:e},(function(e){!e||e.error?(console.debug("SETTINGS GET ASYNC: ERROR CALLING settingsGet"),o(`Error calling settingsGet: ${e?e.error:"No response received"}`)):s(e.success)}))})),l=e=>{let s=$(e).parent();e.checked?s.addClass("checked"):s.removeClass("checked"),!0===$(e).prop("disabled")?s.addClass("disabled"):s.removeClass("disabled")},d=async function(n,r,d,g){d&&$(d).addClass("active");let m=document.getElementById(n);if(!m)return;await async function(t,n){if(n!==o&&n!==e&&n!==s&&t){const e=await c(o);$(t).prop("disabled",!1===e)}}(m,r);const u=await c(r);m.checked=r!==s?!1!==u:u,l(m),d&&$(d).removeClass("active"),await async function(e,n,r){e.addEventListener("change",(async()=>{let c=$(e).prop("disabled");console.debug("CB: Default state of "+e.id+" is "+(c?"disabled":"active")),$(e).prop("disabled",!0);let d={};var g;d[n]=$(e).prop("checked"),l(e),n===s&&(d[n]?d[n]=await new Promise((e=>{i.permissions.request({permissions:["nativeMessaging"]},(s=>{console.log("MMPPNM: Permissions request resp: ",s),e(s)}))})):d[n]=await new Promise((e=>{i.permissions.remove({permissions:["nativeMessaging"]},(s=>{s?(console.debug("MRNM: Successfully removed permissions"),e(!1)):(console.log("MRNM: Did not remove permissions... ",s),e(!0))}))}))),n!==o&&await(g=d,new Promise(((e,s)=>{i.runtime.sendMessage({type:t,payload:g},(function(o){!o||o.error?s(`Error calling settingsSet: ${o?o.error:"No response received"}`):e(o.success)}))}))),console.debug("CB: Setting has been stored for "+e.id),r&&r(),setTimeout((()=>{console.debug("CB: Restoring "+e.id+" to "+(c?"disabled":"active")),function(e,s){$(e).prop("disabled",s),l(e)}(e,c)}),750),n!==o&&(a.reload||(a.reload=i.runtime.connect({name:"RELOAD_ON_CLOSE_PORT"}),console.debug("Began listening for a popup close event")))}))}(m,r,g)};i.i18n.getUILanguage().split("-")[0];let g={noEmailInit:()=>{const e=document.getElementById("email-go");if(!e)return g.success({user_welcomed:!0});e.setAttribute("type","button"),e.addEventListener("click",(()=>g.success({user_welcomed:!0})))},success:e=>{i.storage.local.set(e,(()=>{console.log("User sync complete - ",e)})),i.runtime.sendMessage({type:t,payload:{enableProtection:!0}},(e=>{!e||e.error?console.log("Error calling settingsSet: ",e?e.error:"No response received"):console.log("Protection layers are enabled")})),console.debug("Redirecting to Dashboard"),window?(console.debug("Redirection to dashboard!"),window.location.href="../app.html"):console.log("Redirection failed - cant access window from this scope!"),i.runtime.sendMessage({type:"MSG_ICONS_REFRESH"})}};document.addEventListener("DOMContentLoaded",(()=>{console.debug("Email screen ready."),$("#telem-opt-in-label").popup({inline:!0,position:"top center"}),((e,s=document)=>{[{id:"welcome-header",msg:"welcomeTitle",sub:""},{id:"tagline",msg:"tagline"},{id:"email-go",msg:"letsGoButton"},{id:"telem-opt-in-label-text",msg:"telemOptInLabel"},{id:"email-pp",msg:"privacyPolicyText"}].forEach((({id:e,msg:o,sub:t=null})=>{const n=s.getElementById(e);n&&(n.textContent=i.i18n.getMessage(o,t||void 0))}))})(),document.getElementById("telem-opt-in-label").setAttribute("data-content",i.i18n.getMessage("telemOptInTooltip")),d("telem-consent",e,"#telem-opt-in-label .loader"),i.runtime.sendMessage({type:"MSG_USER_GROUP_GET"},(({success:e,error:s})=>{s?console.error("Error checking user group: ",s):(console.debug("Successfully checked user group: ",e),g.noEmailInit())})),i.windows.getCurrent((e=>{e.height<600&&document.getElementById("malwarebytes-app").classList.add("small-screen")}))}))})();