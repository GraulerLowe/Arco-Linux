chrome||browser||(window.chrome=chrome||window.chrome||window.browser),(chrome||window.chrome).runtime.getURL(""),(()=>{"use strict";Object.freeze({LicenseStateUnknown:0,LicenseStateFree:1,LicenseStateTrial:2,LicenseStateTrialExpired:3,LicenseStateLicensed:4,LicenseStateLicenseExpired:5,LicenseStateLicenseGrace:6}),Object.freeze([2,4,6]);const e="undefined"!=typeof window?window:self,t=e.chrome||e.browser||browser;let o;console.log(`POLYFILL => User Agent: ${navigator.userAgent}, Browser: ${t}`);try{o=indexedDB||e.indexedDB}catch(e){console.log(`Error initializing indexedDB: ${e.message}`)}performance||e.performance,URL||e.URL,t.i18n.getUILanguage().split("-")[0];const n=(e,o=document)=>e.forEach((({id:e,msg:n,sub:s=null})=>{const r=o.getElementById(e);r&&(r.textContent=t.i18n.getMessage(n,s||void 0))}));Object.defineProperty({},"browser",{writable:!0}),Object.defineProperty({},"os",{writable:!0}),Object.defineProperty({},"isMV3",{writable:!0});let s={};Object.defineProperty(s,"bgVersion",{writable:!0}),s.bgVersion||t.runtime.getManifest(),window.addEventListener("DOMContentLoaded",(()=>{n([{id:"download-status",msg:"downloadingStatus"}]),document.getElementById("progress-percentage").textContent="65%",document.querySelector(".debug-page-header").classList.remove("hidden")})),window.addEventListener("load",(()=>{const e=document.querySelector(".download-debug-logs-content .img-container"),o=document.getElementById("download-status"),s=document.querySelector(".download-debug-logs-content .progress-bar-container"),r=document.getElementById("progress-percentage"),d=document.querySelector(".download-debug-logs-content .debug-error-footer");t.runtime.sendMessage({type:"MSG_DOWNLOAD_LOGS",fullLog:!0},(i=>{!i||i.error?(n([{id:"debug-error-message",msg:"debugErrorMessage"},{id:"support-txt",msg:"supportTxt"}]),o.textContent=t.i18n.getMessage("downloadErrorStatus"),e.classList.remove("downloading"),e.classList.add("error"),s.classList.remove("downloading"),s.classList.remove("pulse-animation"),s.classList.add("error"),r.textContent=t.i18n.getMessage("downloadError"),d.classList.remove("hidden")):(o.textContent=t.i18n.getMessage("downloadCompleteStatus"),e.classList.remove("downloading"),e.classList.add("complete"),s.classList.remove("downloading"),s.classList.remove("pulse-animation"),s.classList.add("complete"),r.textContent="100%",(e=>{const o=e,n=URL.createObjectURL(new Blob([o],{type:"text/plain"}));let s;console.log("MDL: Generated logfile",n);const r=new Date;s=`BG-Logs_v${t.runtime.getManifest().version}_${r.toISOString().slice(0,10)}_${r.getHours()}${r.getMinutes()}${r.getSeconds()}.txt`,console.log("MDL: Downloading logfile",{dlDownloadName:s,url:n});let d={url:n,filename:s,conflictAction:"uniquify"};t.downloads.download(d).then((()=>{console.log("Successfully Downloaded logs")})).catch((e=>{console.error("Error downloading logs",e)})),t.downloads.onChanged.addListener((e=>{e.state&&"complete"===e.state.current&&URL.revokeObjectURL(n)}))})(i.data))}))}))})();